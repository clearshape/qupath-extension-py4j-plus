plugins {
    id 'java-library'
    // To create a shadow/fat jar, including dependencies
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    // To manage included native libraries
    id 'org.bytedeco.gradle-javacpp-platform'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

repositories {
    // Use this only for local development!
    //  mavenLocal()

    mavenCentral()

    maven {
        url "https://maven.scijava.org/content/repositories/releases"
    }

    maven {
        url "https://maven.scijava.org/content/repositories/snapshots"
    }

}

ext.moduleName = 'qupath.extension.py4j'

description = 'Connect QuPath to Python using Py4J'

version = "0.0.1-SNAPSHOT"

dependencies {
    def qupathVersion = "0.5.0-SNAPSHOT"

    shadow 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    shadow "org.slf4j:slf4j-api:2.0.0"

    implementation libs.qupath.fxtras
    implementation "io.github.qupath:qupath-gui-fx:${qupathVersion}"
    implementation 'net.sf.py4j:py4j:0.10.9.7'

    testImplementation "io.github.qupath:qupath-gui-fx:${qupathVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.2"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

}

processResources {
    from ("${projectDir}/LICENSE.txt") {
        into 'licenses/'
    }
}

tasks.register("copyDependencies", Copy) {
    description "Copy dependencies into the build directory for use elsewhere"
    group "QuPath"

    from configurations.default
    into 'build/libs'
}

/*
 * Ensure Java 11 compatibility
 */
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    if (project.properties['sources'])
	    withSourcesJar()
    if (project.properties['javadocs'])
	    withJavadocJar()
}

/*
 * Create javadocs for all modules/packages in one place.
 * Use -PstrictJavadoc=true to fail on error with doclint (which is rather strict).
 */
tasks.withType(Javadoc) {
	options.encoding = 'UTF-8'
	def strictJavadoc = findProperty('strictJavadoc')
	if (!strictJavadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
	}
}

/*
 * Set encoding
 */
tasks.named('compileJava') {
	options.encoding = 'UTF-8'
}

/*
 * Avoid 'Entry .gitkeep is a duplicate but no duplicate handling strategy has been set.'
 * when using withSourcesJar()
 */
tasks.withType(org.gradle.jvm.tasks.Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.named('test') {
    useJUnitPlatform()
}
