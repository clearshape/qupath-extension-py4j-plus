plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    // Include this plugin to avoid downloading JavaCPP dependencies for all platforms
    id 'org.bytedeco.gradle-javacpp-platform'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

ext.moduleName = 'qupath.extension.py4j'

base {
    archivesName = rootProject.name
    version = '0.1.0-SNAPSHOT'
    description = 'Connect QuPath to Python using Py4J'
    group = 'io.github.qupath'
}

ext.qupathVersion = gradle.ext.qupathVersion
ext.qupathJavaVersion = libs.versions.jdk.get() as Integer

dependencies {
    shadow "io.github.qupath:qupath-gui-fx:${qupathVersion}"

    shadow libs.slf4j
    shadow libs.qupath.fxtras
    shadow libs.ikonli.javafx
    shadow libs.guava

    implementation 'net.sf.py4j:py4j:0.10.9.7'
}


/*
 * Manifest info
 */
jar {
    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Version": archiveVersion,
                "Automatic-Module-Name": moduleName)
    }
}

/**
 * Copy necessary attributes, see
 * - https://github.com/qupath/qupath-extension-template/issues/9
 * - https://github.com/openjfx/javafx-gradle-plugin#variants
 */
configurations.shadow  {
    def runtimeAttributes = configurations.runtimeClasspath.attributes
    runtimeAttributes.keySet().each { key ->
        if (key in [Usage.USAGE_ATTRIBUTE, OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, MachineArchitecture.ARCHITECTURE_ATTRIBUTE])
            attributes.attribute(key, runtimeAttributes.getAttribute(key))
    }
}

/*
 * Copy the LICENSE file into the jar... if we have one (we should!)
 */
processResources {
    from ("${projectDir}/LICENSE") {
        into 'licenses/'
    }
}

/*
 * Define extra 'copyDependencies' task to copy dependencies into the build directory.
 */
tasks.register("copyDependencies", Copy) {
    description "Copy dependencies into the build directory for use elsewhere"
    group "QuPath"

    from configurations.default
    into 'build/libs'
}

/*
 * Ensure Java compatibility, and include sources and javadocs when building.
 */
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(qupathJavaVersion)
    }
    withSourcesJar()
    withJavadocJar()
}

/*
 * Create javadocs for all modules/packages in one place.
 * Use -PstrictJavadoc=true to fail on error with doclint (which is rather strict).
 */
tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
    def strictJavadoc = findProperty('strictJavadoc')
    if (!strictJavadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

/*
 * Specify that the encoding should be UTF-8 for source files
 */
tasks.named('compileJava') {
    options.encoding = 'UTF-8'
}

/*
 * Avoid 'Entry .gitkeep is a duplicate but no duplicate handling strategy has been set.'
 * when using withSourcesJar()
 */
tasks.withType(org.gradle.jvm.tasks.Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Looks redundant to include this here and in settings.gradle,
// but helps overcome some gradle trouble when including this as a subproject
// within QuPath itself (which is useful during development).
repositories {
    mavenCentral()

    // Add scijava - which is where QuPath's jars are hosted
    maven {
        url "https://maven.scijava.org/content/repositories/releases"
    }

    maven {
        url "https://maven.scijava.org/content/repositories/snapshots"
    }
}


publishing {
    repositories {
        maven {
            name = "SciJava"
            def releasesRepoUrl = uri("https://maven.scijava.org/content/repositories/releases")
            def snapshotsRepoUrl = uri("https://maven.scijava.org/content/repositories/snapshots")
            // Use gradle -Prelease publish
            url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = System.getenv("MAVEN_USER")
                password = System.getenv("MAVEN_PASS")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                licenses {
                    license {
                        name = 'Apache License v2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
            }
        }
    }
}
